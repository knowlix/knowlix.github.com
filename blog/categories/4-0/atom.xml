<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 4.0 | Queuepy]]></title>
  <link href="http://queuepy.com/blog/categories/4-0/atom.xml" rel="self"/>
  <link href="http://queuepy.com/"/>
  <updated>2013-03-05T23:42:02+04:00</updated>
  <id>http://queuepy.com/</id>
  <author>
    <name><![CDATA[Evgenij Kozhevnikov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Netty 4.0: Запуск сервера]]></title>
    <link href="http://queuepy.com/blog/2012/09/09/netty-start-server-4/"/>
    <updated>2012-09-09T21:52:00+04:00</updated>
    <id>http://queuepy.com/blog/2012/09/09/netty-start-server-4</id>
    <content type="html"><![CDATA[<p>Сегодня проведем тонкую грань между разными версиями <em>Netty</em> на примере запуска socket сервера. Ранее мы уже рассматривали <a href="http://queuepy.com/blog/2012/08/04/netty-start-server/">запуск сервера на базе Netty 3.5</a>. Сегодня рассмотрим, как этот процесс осуществляется в четвертой ветке <em>Netty</em>.</p>

<!--more-->


<p>В качестве отправной точки также, как и ранее будем использовать проект, идущий с исходниками ввиде примера Echo сервера. Стоит сразу сказать, что если в версии 3.5 все исходники делились логически с помощью пакетов, то в новой версии исходники разбиты на модули и все примеры использования Netty находятся в отдельном модуле <code>example</code>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ServerBootstrap b = new ServerBootstrap();
</span><span class='line'>try {&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>b.eventLoop(new NioEventLoop(), new NioEventLoop())
</span><span class='line'> .channel(new NioServerSocketChannel())
</span><span class='line'> .option(ChannelOption.SO_BACKLOG, 100)
</span><span class='line'> .localAddress(new InetSocketAddress(port))
</span><span class='line'> .childOption(ChannelOption.TCP_NODELAY, true)
</span><span class='line'> .handler(new LoggingHandler(LogLevel.INFO))
</span><span class='line'> .childHandler(new ChannelInitializer&lt;SocketChannel&gt;() {
</span><span class='line'>     @Override
</span><span class='line'>     public void initChannel(SocketChannel ch) throws Exception {
</span><span class='line'>         ch.pipeline().addLast(
</span><span class='line'>                 new LoggingHandler(LogLevel.INFO),
</span><span class='line'>                 new EchoServerHandler());
</span><span class='line'>     }
</span><span class='line'> });
</span><span class='line'>
</span><span class='line'>ChannelFuture f = b.bind().sync();
</span><span class='line'>
</span><span class='line'>f.channel().closeFuture().sync();
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>} finally {&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>b.shutdown();
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Как и в случае с 3ей версией все начинается с <code>ServerBootstrap</code> - объекта-конфигуратора <em>Netty</em> сервера. Принцип конфигурирования теперь реализован ввиде некого Builder-объекта, где каждый метод-конфигуратор возвращает ссылку на builder до тех пор пока не вызовится метод-строитель. При этом инстанцирование объекта <code>ServerBootstrap</code> отделено от его конфигурирования, т.к. есть только конструктор по-умолчанию (без параметров). Данный подход является более чистым, чем в третьей версии. Там при создании объекта <code>ServerBootstrap</code> необходимо задать фабрику каналов, при этом задание <code>PipelineFactory</code> вынесена в конфигурационный метод. Напомню, что запуск невозможен и без фабрики каналов и без фабрики <code>pipeline'ов</code>. Таким образом есть некая неразбериха. В новом же подходе все объекты задаются на одном уровне, при этом в методе-строителе произведется проверка на корректность сконфигурированных объектов.</p>
]]></content>
  </entry>
  
</feed>
