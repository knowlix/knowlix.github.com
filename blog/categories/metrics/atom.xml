<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Metrics | CodeInsider]]></title>
  <link href="http://knowlix.github.io/blog/categories/metrics/atom.xml" rel="self"/>
  <link href="http://knowlix.github.io/"/>
  <updated>2013-09-22T18:40:47+04:00</updated>
  <id>http://knowlix.github.io/</id>
  <author>
    <name><![CDATA[Code insiders]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Прицельный обзор: Reporter'ы в библиотеке Metrics]]></title>
    <link href="http://knowlix.github.io/blog/2012/08/24/metrics-reporting/"/>
    <updated>2012-08-24T00:22:00+04:00</updated>
    <id>http://knowlix.github.io/blog/2012/08/24/metrics-reporting</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/codahale/metrics">Metrics</a> - библиотека проведения измерения различных метрик как приложения, так и самого JVM от разработчиков Yammer.</p>

<!--more-->


<p>Build tool - Maven с использованием мультимодульности.</p>

<p>Помимо неплохого JavaDoc’а ведется внешняя документация с использованием <a href="http://sphinx.pocoo.org/intro.html">Sphinx</a> - генератора документации на <em>python</em>. Текст документации ведется в <em>reStructuredText</em> разметке. Этот язык разметки сильно упрощен относительно HTML, при этом текст с разметкой не захламлен тегами и читается очень естественно. Сильно напоминает <em>markdown</em>. Документация преобразуется в html посредством генератора из скрипта <em>Makefile</em>.</p>

<p>Основной модуль проекта реализует его архитектуру и основные возможности библиотеки. Остальные модули - это дополнительные возможности, как правило привязанные к конкретным технологиям и библиотекам (например, вывод с помощью log4j или сбор web-ориентированных метрик).</p>

<p>Подход к использованию библиотеки напоминает подход, применяемый в <em>Mockito</em>. Пользователь библиотеки работает с делегатом, как с единой точкой доступа к функционалу библиотеки. Т.е. наружу смотрит класс <code>Metrics</code> либо <code>HealthChecks</code> с набором статичных методов. Реализация этих методов вынесена в отдельный класс, экземпляр которого создается внутри основного класса, например в классе <code>Metrics</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>private static final MetricsRegistry DEFAULT_REGISTRY = new MetricsRegistry();</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Сам класс <em>Metrics</em> передает управление делегируемому объекту при вызове его методов:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public static &lt;T> Gauge&lt;T> newGauge(Class&lt;?> klass,&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>                                String name,
</span><span class='line'>                                Gauge&lt;T&gt; metric) {
</span><span class='line'>return DEFAULT_REGISTRY.newGauge(klass, name, metric);
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Библиотека оперирует несколькими измерительными сущностями:</p>

<p>Метриками:
1. <code>Gauges</code> для контроля значений используемых объектов
2. <code>Counters</code> для ведения счетчиков. Используется AtomicLong для подсчета
3. <code>Meters</code> для измерения скорости работы того или иного компонента
4. <code>Histograms</code> для измерения статистического распределения значений в потоке данных
5. <code>Timers</code> для измерения продолжительности и скорости выполнения кода</p>

<p>и <code>HealthChecks</code> для централизованного контроля работоспособности системы.</p>

<p>Прицип работы:</p>

<ol>
<li>Объявляем метрики</li>
<li>Указываем точки определения метрик в коде</li>
<li>Собираем статистику с помощью <code>Reporter’ов</code></li>
</ol>


<p><code>Reporter</code> - объект, который следит за метриками и в случае их появления или изменения оповещает пользователя, доступным reporter’у способом.</p>

<p>Основным <code>Reporter’ом</code> является <code>JMXReporter</code>, который позволяет получать
результаты измерения в JMX консоли. При загрузке класса <code>Metrics</code>
<code>JMXReporter</code> подписывается на события регистра метрик, реализуя при
этом интерфейс слушателя событий регистра метрик.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static {&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>JmxReporter.startDefault(DEFAULT_REGISTRY);
</span><span class='line'>Runtime.getRuntime().addShutdownHook(SHUTDOWN_HOOK);
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Тогда же вешается хук на событие завершения приложения, чтобы иметь возможность освободить зарегистрированные MBean’ы JMX сервера. При этом <code>SHUTDOWN_HOOK</code> - это поток, реализующий логику, выполняемую при выключении приложения.</p>

<p>При создании метрики, та попадает в регистр метрик. Регистр метрик оповещает слушателей о добавлении новой метрики. <code>JMXReporter</code> получает по событию добавления ссылку на метрику. При этом <code>JMXReporter</code> описывает внутренние классы MBean’ов для каждого вида метрики, чтобы можно было снимать с них показания через JMX консоль. В конструкторе они получают ссылку на метрику и в случае вызова метода, передают управление конкретной метрики. MBean’ы регистрируются на JMX сервере и готовы к снятию показаний.</p>

<p>Внутри библиотеки реализованы дополнительные <code>reporter’ы</code> для вывода данных в <em>CSV</em> файлы или консоль. Эти reporter’ы сами периодически опрашивают метрики, получая данные из них. Опрос метрик происходит в отдельном потоке, созданный с помощью <code>SingleThreadScheduledExecutor</code>.</p>

<p>В аргументе принимается фабрика потоков, которая пораждает потоки и добавляет их в единую группу, тем самым разделяя потоки, запущенные разными executor’ами. Т.е. запущенные из разных executor’ов потоки не будут иметь прав на доступ к потокам из другой группы. Группа получается из стандартного <code>SecurityManager’а</code>. Потоки являются демонами.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>private static class NamedThreadFactory implements ThreadFactory {&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>private final ThreadGroup group;
</span><span class='line'>private final AtomicInteger threadNumber = new AtomicInteger(1);
</span><span class='line'>private final String namePrefix;
</span><span class='line'>
</span><span class='line'>private NamedThreadFactory(String name) {
</span><span class='line'>    final SecurityManager s = System.getSecurityManager();
</span><span class='line'>    this.group = (s != null) ? s.getThreadGroup() : Thread.currentThread().getThreadGroup();
</span><span class='line'>    this.namePrefix = "metrics-" + name + "-thread-";
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>@Override
</span><span class='line'>public Thread newThread(Runnable r) {
</span><span class='line'>    final Thread t = new Thread(group, r, namePrefix + threadNumber.getAndIncrement(), 0);
</span><span class='line'>    t.setDaemon(true);
</span><span class='line'>    if (t.getPriority() != Thread.NORM_PRIORITY) {
</span><span class='line'>        t.setPriority(Thread.NORM_PRIORITY);
</span><span class='line'>    }
</span><span class='line'>    return t;
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Основной метод снятия показаний с метрик и вывод их в том или ином виде переопределяется в конкретном классе reporter’а. Все метрики зарегистрированны в реестре метрик и любой репортер в момент создания связывается с конкретным реестром. А ссылка на единый реестр метрик хранится в базовых классах <code>Metrics</code> и <code>HealthChecks</code>.</p>
]]></content>
  </entry>
  
</feed>
